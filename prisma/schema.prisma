generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id           Int                        @id @default(autoincrement())
  username     String                     @unique(map: "Admin_username_key")
  password     String
  role         admin_role                 @default(ADMIN)
  createdById  Int?
  name         String
  admin        admin?                     @relation("adminToadmin", fields: [createdById], references: [id], map: "Admin_createdById_fkey", onDelete: Cascade, onUpdate: Cascade)
  other_admin  admin[]                    @relation("adminToadmin")
  log          log[]
  created_At   DateTime?                  @default(now())
  updated_At   DateTime?                  @updatedAt
  workinghours workinghours[] //ADMINISTRATION
  params       admin_appointment_params[]

  @@index([createdById], map: "Admin_createdById_fkey")
}

model appointment {
  id             Int                        @id @default(autoincrement())
  clientId       Int                        @unique(map: "Appointment_clientId_key")
  WorkingHoursId Int                        @unique(map: "Appointment_WorkingHoursId_key")
  link           String                     @unique(map: "Appointment_link_key") @default(cuid())
  workinghours   workinghours               @relation(fields: [WorkingHoursId], references: [id], map: "Appointment_WorkingHoursId_fkey", onDelete: Cascade, onUpdate: Cascade)
  client         client                     @relation(fields: [clientId], references: [id], map: "Appointment_clientId_fkey", onDelete: Cascade, onUpdate: Cascade)
  payment        payment?
  created_At     DateTime?                  @default(now())
  updated_At     DateTime?                  @updatedAt
  state          appointment_state          @default(SCHEDULED)
  params         admin_appointment_params[]
}

model admin_appointment_params {
  id            Int         @id @default(autoincrement())
  seen          Boolean     @default(false)
  adminId       Int //ADMINISTRATION
  appointmentId Int
  admin         admin       @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  appointment   appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model client {
  id          Int          @id @default(autoincrement())
  firstName   String
  lastName    String
  age         Int
  phoneNumber String
  email       String?
  wilaya      String
  ipAddress   String?
  createdAt   DateTime     @default(now())
  appointment appointment?
  created_At  DateTime?    @default(now())
  updated_At  DateTime?    @updatedAt
}

model log {
  id         Int       @id @default(autoincrement())
  action     String
  timestamp  DateTime  @default(now())
  adminId    Int
  admin      admin     @relation(fields: [adminId], references: [id], map: "Log_adminId_fkey", onDelete: Cascade, onUpdate: Cascade)
  created_At DateTime? @default(now())
  updated_At DateTime? @updatedAt

  @@index([adminId], map: "Log_adminId_fkey")
}

model payment {
  id            Int         @id @default(autoincrement())
  amount        Float
  // paymentMethod payment_paymentMethod
  appointmentId Int         @unique(map: "Payment_appointmentId_key")
  payed         Float
  recite_path   String?
  appointment   appointment @relation(fields: [appointmentId], references: [id], map: "Payment_appointmentId_fkey", onDelete: Cascade, onUpdate: Cascade)
  created_At    DateTime?   @default(now())
  updated_At    DateTime?   @updatedAt
}

model workinghours {
  id          Int                @id @default(autoincrement())
  date        DateTime
  type        workinghours_type
  duration    Int
  appointment appointment?
  adminId     Int? //ADMINISTRATION
  created_By  admin?             @relation(fields: [adminId], references: [id], onDelete: Cascade, onUpdate: Cascade) //ADMINISTRATION
  created_At  DateTime?          @default(now())
  updated_At  DateTime?          @default(now())
  state       workinghours_state @default(ACTIVE)
}

enum payment_paymentMethod {
  CCPBaridiMob
  OnSite
}

enum admin_role {
  OWNER
  ADMIN
}

enum workinghours_type {
  InPerson
  Online
}

enum workinghours_state {
  ACTIVE
  PAUSED
  REMOVED
  COMPLETED
}

enum appointment_state {
  SCHEDULED
  COMPLETED
  CANCELLED
  CONFIRMED
}
